import type { InferGetServerSidePropsType, NextPage } from "next";
import Head from "next/head";
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  VStack,
  Text,
} from "@chakra-ui/react";
import { useForm } from "react-hook-form";
import { createPerson, getPersons } from "../services/apiService";
import { prisma } from "../lib/prisma";
import { Prisma } from "@prisma/client";
import { dehydrate, QueryClient, useQuery } from "react-query";

interface FormValues {
  name: string;
}

interface Props {
  users: Prisma.PersonSelect[];
}

const Home: NextPage = () => {
  const { register, handleSubmit } = useForm<FormValues>();

  const { data: users, isLoading, refetch } = useQuery("users", getPersons);

  const onSubmit = async (data: FormValues) => {
    await createPerson(data.name);
    refetch();
  };

  if (isLoading || !users) return null;

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box>
        <FormControl mb="4">
          <FormLabel>Name</FormLabel>
          <Input {...register("name")} />
        </FormControl>
        <Button onClick={handleSubmit(onSubmit)}>Create user</Button>
      </Box>
      <VStack>
        {users.map((user) => (
          <Text key={user.id}>{user.name}</Text>
        ))}
      </VStack>
    </div>
  );
};

export default Home;

export const getServerSideProps = async () => {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery("posts", getPersons);

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};
